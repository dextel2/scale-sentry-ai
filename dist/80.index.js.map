{"version":3,"file":"80.index.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././node_modules/@vercel/oidc/dist/token-io.js",".././node_modules/@vercel/oidc/dist/token-util.js"],"sourcesContent":["\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar token_io_exports = {};\n__export(token_io_exports, {\n  findRootDir: () => findRootDir,\n  getUserDataDir: () => getUserDataDir\n});\nmodule.exports = __toCommonJS(token_io_exports);\nvar import_path = __toESM(require(\"path\"));\nvar import_fs = __toESM(require(\"fs\"));\nvar import_os = __toESM(require(\"os\"));\nvar import_token_error = require(\"./token-error\");\nfunction findRootDir() {\n  try {\n    let dir = process.cwd();\n    while (dir !== import_path.default.dirname(dir)) {\n      const pkgPath = import_path.default.join(dir, \".vercel\");\n      if (import_fs.default.existsSync(pkgPath)) {\n        return dir;\n      }\n      dir = import_path.default.dirname(dir);\n    }\n  } catch (e) {\n    throw new import_token_error.VercelOidcTokenError(\n      \"Token refresh only supported in node server environments\"\n    );\n  }\n  throw new import_token_error.VercelOidcTokenError(\"Unable to find root directory\");\n}\nfunction getUserDataDir() {\n  if (process.env.XDG_DATA_HOME) {\n    return process.env.XDG_DATA_HOME;\n  }\n  switch (import_os.default.platform()) {\n    case \"darwin\":\n      return import_path.default.join(import_os.default.homedir(), \"Library/Application Support\");\n    case \"linux\":\n      return import_path.default.join(import_os.default.homedir(), \".local/share\");\n    case \"win32\":\n      if (process.env.LOCALAPPDATA) {\n        return process.env.LOCALAPPDATA;\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  findRootDir,\n  getUserDataDir\n});\n","\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar token_util_exports = {};\n__export(token_util_exports, {\n  assertVercelOidcTokenResponse: () => assertVercelOidcTokenResponse,\n  findProjectInfo: () => findProjectInfo,\n  getTokenPayload: () => getTokenPayload,\n  getVercelCliToken: () => getVercelCliToken,\n  getVercelDataDir: () => getVercelDataDir,\n  getVercelOidcToken: () => getVercelOidcToken,\n  isExpired: () => isExpired,\n  loadToken: () => loadToken,\n  saveToken: () => saveToken\n});\nmodule.exports = __toCommonJS(token_util_exports);\nvar path = __toESM(require(\"path\"));\nvar fs = __toESM(require(\"fs\"));\nvar import_token_error = require(\"./token-error\");\nvar import_token_io = require(\"./token-io\");\nfunction getVercelDataDir() {\n  const vercelFolder = \"com.vercel.cli\";\n  const dataDir = (0, import_token_io.getUserDataDir)();\n  if (!dataDir) {\n    return null;\n  }\n  return path.join(dataDir, vercelFolder);\n}\nfunction getVercelCliToken() {\n  const dataDir = getVercelDataDir();\n  if (!dataDir) {\n    return null;\n  }\n  const tokenPath = path.join(dataDir, \"auth.json\");\n  if (!fs.existsSync(tokenPath)) {\n    return null;\n  }\n  const token = fs.readFileSync(tokenPath, \"utf8\");\n  if (!token) {\n    return null;\n  }\n  return JSON.parse(token).token;\n}\nasync function getVercelOidcToken(authToken, projectId, teamId) {\n  try {\n    const url = `https://api.vercel.com/v1/projects/${projectId}/token?source=vercel-oidc-refresh${teamId ? `&teamId=${teamId}` : \"\"}`;\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (!res.ok) {\n      throw new import_token_error.VercelOidcTokenError(\n        `Failed to refresh OIDC token: ${res.statusText}`\n      );\n    }\n    const tokenRes = await res.json();\n    assertVercelOidcTokenResponse(tokenRes);\n    return tokenRes;\n  } catch (e) {\n    throw new import_token_error.VercelOidcTokenError(`Failed to refresh OIDC token`, e);\n  }\n}\nfunction assertVercelOidcTokenResponse(res) {\n  if (!res || typeof res !== \"object\") {\n    throw new TypeError(\"Expected an object\");\n  }\n  if (!(\"token\" in res) || typeof res.token !== \"string\") {\n    throw new TypeError(\"Expected a string-valued token property\");\n  }\n}\nfunction findProjectInfo() {\n  const dir = (0, import_token_io.findRootDir)();\n  if (!dir) {\n    throw new import_token_error.VercelOidcTokenError(\"Unable to find root directory\");\n  }\n  try {\n    const prjPath = path.join(dir, \".vercel\", \"project.json\");\n    if (!fs.existsSync(prjPath)) {\n      throw new import_token_error.VercelOidcTokenError(\"project.json not found\");\n    }\n    const prj = JSON.parse(fs.readFileSync(prjPath, \"utf8\"));\n    if (typeof prj.projectId !== \"string\" && typeof prj.orgId !== \"string\") {\n      throw new TypeError(\"Expected a string-valued projectId property\");\n    }\n    return { projectId: prj.projectId, teamId: prj.orgId };\n  } catch (e) {\n    throw new import_token_error.VercelOidcTokenError(`Unable to find project ID`, e);\n  }\n}\nfunction saveToken(token, projectId) {\n  try {\n    const dir = (0, import_token_io.getUserDataDir)();\n    if (!dir) {\n      throw new import_token_error.VercelOidcTokenError(\"Unable to find user data directory\");\n    }\n    const tokenPath = path.join(dir, \"com.vercel.token\", `${projectId}.json`);\n    const tokenJson = JSON.stringify(token);\n    fs.mkdirSync(path.dirname(tokenPath), { mode: 432, recursive: true });\n    fs.writeFileSync(tokenPath, tokenJson);\n    fs.chmodSync(tokenPath, 432);\n    return;\n  } catch (e) {\n    throw new import_token_error.VercelOidcTokenError(`Failed to save token`, e);\n  }\n}\nfunction loadToken(projectId) {\n  try {\n    const dir = (0, import_token_io.getUserDataDir)();\n    if (!dir) {\n      return null;\n    }\n    const tokenPath = path.join(dir, \"com.vercel.token\", `${projectId}.json`);\n    if (!fs.existsSync(tokenPath)) {\n      return null;\n    }\n    const token = JSON.parse(fs.readFileSync(tokenPath, \"utf8\"));\n    assertVercelOidcTokenResponse(token);\n    return token;\n  } catch (e) {\n    throw new import_token_error.VercelOidcTokenError(`Failed to load token`, e);\n  }\n}\nfunction getTokenPayload(token) {\n  const tokenParts = token.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new import_token_error.VercelOidcTokenError(\"Invalid token\");\n  }\n  const base64 = tokenParts[1].replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const padded = base64.padEnd(\n    base64.length + (4 - base64.length % 4) % 4,\n    \"=\"\n  );\n  return JSON.parse(Buffer.from(padded, \"base64\").toString(\"utf8\"));\n}\nconst TIME_15_MINUTES_IN_MS = 15 * 60 * 1e3;\nfunction isExpired(token) {\n  return token.exp * 1e3 < Date.now() + TIME_15_MINUTES_IN_MS;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  assertVercelOidcTokenResponse,\n  findProjectInfo,\n  getTokenPayload,\n  getVercelCliToken,\n  getVercelDataDir,\n  getVercelOidcToken,\n  isExpired,\n  loadToken,\n  saveToken\n});\n"],"names":[],"sourceRoot":""}